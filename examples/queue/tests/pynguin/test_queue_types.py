# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import queue_types as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    int_0 = 457
    queue_0 = module_0.Queue(int_0)
    assert (
        f"{type(queue_0).__module__}.{type(queue_0).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_0.max == 457
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 457
    queue_0.enqueue(none_type_0)


def test_case_1():
    int_0 = -2103
    with pytest.raises(AssertionError):
        module_0.Queue(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2129
    queue_0 = module_0.Queue(int_0)
    assert (
        f"{type(queue_0).__module__}.{type(queue_0).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_0.max == 2129
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 2129
    var_0 = queue_0.dequeue()
    none_type_0 = None
    bool_0 = queue_0.full()
    assert bool_0 is False
    module_0.Queue(none_type_0)


def test_case_3():
    bool_0 = True
    queue_0 = module_0.Queue(bool_0)
    assert (
        f"{type(queue_0).__module__}.{type(queue_0).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_0.max is True
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 1
    bool_1 = queue_0.empty()
    assert bool_1 is False
    bool_2 = False
    bool_3 = queue_0.enqueue(bool_2)
    assert bool_3 is True
    assert queue_0.size == 1
    bool_4 = queue_0.empty()
    assert bool_4 is True
    int_0 = 1437
    var_0 = queue_0.dequeue()
    assert var_0 == 0
    assert queue_0.size == 0
    queue_1 = module_0.Queue(int_0)
    assert queue_1.size == 0
    bool_5 = queue_1.empty()
    assert bool_5 is False
    bool_6 = queue_1.full()
    assert bool_6 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 481
    queue_0 = module_0.Queue(int_0)
    assert (
        f"{type(queue_0).__module__}.{type(queue_0).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_0.max == 481
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 481
    int_1 = -2008
    bool_0 = queue_0.enqueue(int_1)
    assert bool_0 is True
    assert queue_0.tail == 1
    assert queue_0.size == 1
    bool_1 = queue_0.empty()
    assert bool_1 is True
    bool_2 = queue_0.full()
    assert bool_2 is False
    bool_3 = queue_0.empty()
    assert bool_3 is True
    none_type_0 = None
    module_0.Queue(none_type_0)


def test_case_5():
    int_0 = 3182
    int_1 = 481
    queue_0 = module_0.Queue(int_1)
    assert (
        f"{type(queue_0).__module__}.{type(queue_0).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_0.max == 481
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 481
    bool_0 = queue_0.enqueue(int_0)
    assert bool_0 is True
    assert queue_0.tail == 1
    assert queue_0.size == 1


def test_case_6():
    int_0 = 119
    queue_0 = module_0.Queue(int_0)
    assert (
        f"{type(queue_0).__module__}.{type(queue_0).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_0.max == 119
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 119
    bool_0 = True
    queue_1 = module_0.Queue(bool_0)
    assert (
        f"{type(queue_1).__module__}.{type(queue_1).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_1.max is True
    assert queue_1.head == 0
    assert queue_1.tail == 0
    assert queue_1.size == 0
    assert (
        f"{type(queue_1.data).__module__}.{type(queue_1.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_1.data) == 1
    bool_1 = queue_1.empty()
    assert bool_1 is False
    bool_2 = queue_0.full()
    assert bool_2 is False
    bool_3 = queue_0.full()
    assert bool_3 is False
    int_1 = 2564
    bool_4 = False
    bool_5 = queue_1.enqueue(bool_4)
    assert bool_5 is True
    assert queue_1.size == 1
    bool_6 = queue_0.enqueue(int_1)
    assert bool_6 is True
    assert queue_0.tail == 1
    assert queue_0.size == 1
    bool_7 = queue_1.empty()
    assert bool_7 is True
    var_0 = queue_0.dequeue()
    assert var_0 == 2564
    assert queue_0.head == 1
    assert queue_0.size == 0
    bool_8 = queue_0.empty()
    assert bool_8 is False
    bool_9 = queue_0.empty()
    assert bool_9 is False
    bool_10 = queue_0.full()
    assert bool_10 is False
    queue_2 = module_0.Queue(var_0)
    assert (
        f"{type(queue_2).__module__}.{type(queue_2).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_2.max == 2564
    assert queue_2.head == 0
    assert queue_2.tail == 0
    assert queue_2.size == 0
    assert (
        f"{type(queue_2.data).__module__}.{type(queue_2.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_2.data) == 2564
    bool_11 = queue_2.empty()
    assert bool_11 is False
    int_2 = 19
    queue_3 = module_0.Queue(int_2)
    assert queue_3.head == 0
    assert queue_3.size == 0


def test_case_7():
    int_0 = 119
    queue_0 = module_0.Queue(int_0)
    assert (
        f"{type(queue_0).__module__}.{type(queue_0).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_0.max == 119
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 119
    bool_0 = True
    queue_1 = module_0.Queue(bool_0)
    assert (
        f"{type(queue_1).__module__}.{type(queue_1).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_1.max is True
    assert queue_1.head == 0
    assert queue_1.tail == 0
    assert queue_1.size == 0
    assert (
        f"{type(queue_1.data).__module__}.{type(queue_1.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_1.data) == 1
    bool_1 = queue_1.empty()
    assert bool_1 is False
    bool_2 = queue_0.full()
    assert bool_2 is False
    bool_3 = queue_0.full()
    assert bool_3 is False
    int_1 = 2564
    bool_4 = False
    bool_5 = queue_1.enqueue(bool_4)
    assert bool_5 is True
    assert queue_1.size == 1
    bool_6 = queue_0.enqueue(int_1)
    assert bool_6 is True
    assert queue_0.tail == 1
    assert queue_0.size == 1
    bool_7 = queue_1.empty()
    assert bool_7 is True
    var_0 = queue_0.dequeue()
    assert var_0 == 2564
    assert queue_0.head == 1
    assert queue_0.size == 0
    bool_8 = queue_0.empty()
    assert bool_8 is False
    bool_9 = queue_0.empty()
    assert bool_9 is False
    bool_10 = queue_0.full()
    assert bool_10 is False
    var_1 = queue_0.dequeue()
    bool_11 = queue_0.full()
    assert bool_11 is False
    bool_12 = queue_1.enqueue(bool_2)
    assert bool_12 is False
    var_2 = queue_1.dequeue()
    assert var_2 == 0
    assert queue_1.size == 0
    bool_13 = queue_1.full()
    assert bool_13 is False
    queue_2 = module_0.Queue(bool_6)
    assert (
        f"{type(queue_2).__module__}.{type(queue_2).__qualname__}"
        == "queue_types.Queue"
    )
    assert queue_2.max is True
    assert queue_2.head == 0
    assert queue_2.tail == 0
    assert queue_2.size == 0
    assert (
        f"{type(queue_2.data).__module__}.{type(queue_2.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_2.data) == 1
    bool_14 = queue_1.empty()
    assert bool_14 is False
    with pytest.raises(AssertionError):
        module_0.Queue(bool_11)
