# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import pet as module_0


def test_case_0():
    int_0 = 1235
    animal_0 = module_0.Animal(int_0)


def test_case_1():
    int_0 = 1235
    animal_0 = module_0.create_pet(int_0, int_0, int_0)
    assert f"{type(animal_0).__module__}.{type(animal_0).__qualname__}" == "pet.Pet"


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_0.create_pet(bool_0, bool_0, bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pet.Pet"
    var_0.__str__()


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.create_pet(none_type_0, none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pet.Pet"
    var_1 = var_0.get_age()
    bool_0 = True
    animal_0 = module_0.Animal(bool_0)
    animal_1 = module_0.Animal(bool_0, bool_0)
    var_2 = animal_1.__str__()
    assert var_2 == "True:True"
    var_2.get_age()


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    animal_0 = module_0.Animal(bool_0)
    var_0 = animal_0.get_complex_object()
    var_0.get_age()


def test_case_5():
    none_type_0 = None
    var_0 = module_0.create_pet(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pet.Pet"


def test_case_6():
    bytes_0 = b'\xfa\xd4\xcd\x9a"\xa1R\xc3\xe5'
    var_0 = module_0.create_pet(bytes_0, bytes_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pet.Pet"
    var_1 = var_0.get_name()
