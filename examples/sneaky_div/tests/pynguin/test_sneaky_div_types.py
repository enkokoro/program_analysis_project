# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import sneaky_div_types as module_0


def test_case_0():
    bool_0 = True
    int_0 = -130
    int_1 = module_0.sneaky_div(bool_0, int_0)
    assert int_1 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    int_0 = module_0.sneaky_div(bool_0, bool_0)
    assert int_0 is False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.sneaky_div(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    none_type_0 = None
    module_0.sneaky_div(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    int_0 = module_0.sneaky_div(bool_0, bool_0)
    assert int_0 is False
    int_1 = module_0.sneaky_div(bool_0, bool_0)
    int_2 = module_0.sneaky_div(bool_0, int_1)
    int_3 = module_0.sneaky_div(bool_0, int_2)
    int_4 = module_0.sneaky_div(bool_0, bool_0)
    int_5 = module_0.sneaky_div(int_1, int_2)
    int_6 = module_0.sneaky_div(int_5, int_5)
    int_7 = 4146
    int_8 = module_0.sneaky_div(int_7, int_1)
    assert int_8 == 4146
    int_9 = module_0.sneaky_div(int_8, bool_0)
    assert int_9 == 4146
    bool_1 = False
    bool_2 = True
    int_10 = module_0.sneaky_div(bool_1, bool_2)
    assert int_10 is True
    int_11 = -1953
    int_12 = module_0.sneaky_div(int_11, int_3)
    assert int_12 is False
    none_type_0 = None
    int_13 = module_0.sneaky_div(int_2, int_4)
    bool_3 = False
    int_14 = module_0.sneaky_div(bool_3, int_2)
    int_15 = 10011
    module_0.sneaky_div(int_15, none_type_0)
